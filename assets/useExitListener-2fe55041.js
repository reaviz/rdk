import{r as l}from"./index-1b03fe98.js";const s=({ref:r,open:o=!0,onClickOutside:e,onEscape:t})=>{l.useEffect(()=>{if(!o)return;const a=n=>{r.current&&!r.current.contains(n.target)&&(e==null||e(n))},i=n=>{n.code==="Escape"&&(t==null||t(n))};return e&&(document.addEventListener("mousedown",a),document.addEventListener("touchstart",a)),t&&document.addEventListener("keydown",i),()=>{e&&(document.removeEventListener("mousedown",a),document.removeEventListener("touchstart",a)),t&&document.removeEventListener("keydown",i)}},[r,e,t,o])};try{s.displayName="useExitListener",s.__docgenInfo={description:"",displayName:"useExitListener",props:{ref:{defaultValue:null,description:`A ref object pointing to the target element that the hook should
observe for click outside and escape key events.`,name:"ref",required:!0,type:{name:"RefObject<HTMLElement | null>"}},open:{defaultValue:{value:"true"},description:`An optional boolean to enable or disable the event listeners.
When set to true (default), the event listeners are active.`,name:"open",required:!1,type:{name:"boolean"}},onClickOutside:{defaultValue:null,description:`An optional callback function that is called when a click
event occurs outside the target element.`,name:"onClickOutside",required:!1,type:{name:"((event: MouseEvent) => void)"}},onEscape:{defaultValue:null,description:`An optional callback function that is called
when the 'Escape' key is pressed.`,name:"onEscape",required:!1,type:{name:"((event: KeyboardEvent) => void)"}}}}}catch{}export{s as u};
