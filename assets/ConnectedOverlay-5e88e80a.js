import{j as h}from"./jsx-runtime-9c4ae004.js";import{r as t}from"./index-1b03fe98.js";import{O as x}from"./OverlayTrigger-f3c16cef.js";import{O as N,A as R}from"./OverlayContext-da5a27a1.js";import{u as I}from"./useExitListener-2fe55041.js";import{u as j}from"./usePosition-49b6064a.js";import{u as B,O as k,p as _}from"./OverlayPortal-c2847cdb.js";import{c as A}from"./motion-a00ca7d7.js";function T({children:a,element:n,childRef:o,...p}){const m=t.useMemo(()=>l=>{const r=n.props;return Object.keys(l).reduce((d,e)=>{const u=l[e],s=r[e];return typeof u=="function"&&typeof s=="function"?d[e]=(...i)=>{u(...i),s(...i)}:e==="className"?d[e]=A(u,s):d[e]=u,d},{})},[p]);if(n===null)return a;const y=o?l=>{typeof o=="function"?o(l):y&&(o.current=l)}:void 0,v=m(p);return t.cloneElement(n,{...n.props,...v,children:a,ref:y})}try{T.displayName="CloneElement",T.__docgenInfo={description:`CloneElement is a wrapper component for createElement function.
This allows you to describe your cloning element declaratively
which is a more natural API for React.`,displayName:"CloneElement",props:{element:{defaultValue:null,description:"",name:"element",required:!0,type:{name:"any"}},childRef:{defaultValue:null,description:"",name:"childRef",required:!1,type:{name:"any"}}}}}catch{}const b=t.forwardRef(({triggerRef:a,children:n,portalClassName:o,closeOnBodyClick:p,closeOnEscape:m,elementType:y,appendToBody:v,followCursor:l,modifiers:r,placement:d,onClose:e},u)=>{const s=B(),[i,q]=t.useState(null),[f,g]=j(a,{followCursor:l,modifiers:r,placement:d});t.useImperativeHandle(u,()=>({updatePosition:()=>{var c;(c=g==null?void 0:g.current)==null||c.scheduleUpdate()}}));const E=t.useCallback(c=>{if(p){let V=null;a.current?V=a.current:a.contains!==void 0&&(V=a);const P=c.target.closest(".rdk-portal"),w=_.indexOf(s)===_.length-1;!(V!=null&&V.contains(c.target))&&(w||!P)&&(e==null||e(c))}},[p,e]),C=t.useCallback(()=>{m&&(e==null||e())},[m,e]);return I({open:!0,ref:f,onClickOutside:E,onEscape:C}),t.useEffect(()=>{f&&i&&(f.current.style.zIndex=i)},[f.current,i]),h.jsx(k,{id:s,ref:f,className:o,elementType:y,appendToBody:v,onMount:c=>q(c.overlayIndex),onUnmount:()=>q(null),children:n})});b.defaultProps={closeOnBodyClick:!0,closeOnEscape:!0,appendToBody:!0,placement:"bottom"};try{b.displayName="ConnectedOverlayContent",b.__docgenInfo={description:"",displayName:"ConnectedOverlayContent",props:{modifiers:{defaultValue:null,description:"",name:"modifiers",required:!1,type:{name:"any"}},followCursor:{defaultValue:null,description:"",name:"followCursor",required:!1,type:{name:"boolean"}},portalClassName:{defaultValue:null,description:"",name:"portalClassName",required:!1,type:{name:"string"}},placement:{defaultValue:{value:"bottom"},description:"",name:"placement",required:!1,type:{name:"enum",value:[{value:'"auto-start"'},{value:'"auto"'},{value:'"auto-end"'},{value:'"top-start"'},{value:'"top"'},{value:'"top-end"'},{value:'"right-start"'},{value:'"right"'},{value:'"right-end"'},{value:'"bottom-end"'},{value:'"bottom"'},{value:'"bottom-start"'},{value:'"left-end"'},{value:'"left"'},{value:'"left-start"'}]}},triggerRef:{defaultValue:null,description:"",name:"triggerRef",required:!0,type:{name:"any"}},closeOnBodyClick:{defaultValue:{value:"true"},description:"",name:"closeOnBodyClick",required:!1,type:{name:"boolean"}},closeOnEscape:{defaultValue:{value:"true"},description:"",name:"closeOnEscape",required:!1,type:{name:"boolean"}},elementType:{defaultValue:null,description:"",name:"elementType",required:!1,type:{name:"any"}},appendToBody:{defaultValue:{value:"true"},description:"",name:"appendToBody",required:!1,type:{name:"boolean"}},onClose:{defaultValue:null,description:"",name:"onClose",required:!1,type:{name:"((event?: any) => void)"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<ConnectedOverlayContentRef>"}}}}}catch{}const O=t.forwardRef(({reference:a,children:n,open:o,content:p,triggerElement:m,triggerClassName:y,trigger:v,onOpen:l,onClose:r,...d},e)=>{const u=t.useRef(!1),s=t.useRef(null),i=t.useRef(null),q=a||s;t.useImperativeHandle(e,()=>({updatePosition:()=>{var g;(g=i.current)==null||g.updatePosition()}})),t.useEffect(()=>{u.current&&(o?l==null||l():r==null||r())},[o]),t.useEffect(()=>{u.current||(u.current=!0)});const f=t.useMemo(()=>({close:()=>r==null?void 0:r()}),[r]);return h.jsxs(N.Provider,{value:f,children:[n&&h.jsx(t.Fragment,{children:v?h.jsx(x,{elementType:m,ref:s,className:y,trigger:v,onOpen:l,onClose:r,children:n}):n}),h.jsx(R,{children:o&&h.jsx(b,{...d,ref:i,triggerRef:q,onClose:r,children:p})})]})});O.defaultProps={trigger:"click"};try{O.displayName="ConnectedOverlay",O.__docgenInfo={description:"",displayName:"ConnectedOverlay",props:{open:{defaultValue:null,description:"Whether the overlay should be visible.",name:"open",required:!0,type:{name:"boolean"}},reference:{defaultValue:null,description:"Reference of the overlay to align to.",name:"reference",required:!1,type:{name:"ReferenceProp"}},children:{defaultValue:null,description:"The content of the overlay.",name:"children",required:!1,type:{name:"any"}},content:{defaultValue:null,description:"Content to render in the overlay.",name:"content",required:!0,type:{name:"any"}},trigger:{defaultValue:{value:"'click' as TriggerTypes"},description:"Type of trigger to open the overlay.",name:"trigger",required:!1,type:{name:"TriggerTypes | TriggerTypes[]"}},triggerElement:{defaultValue:null,description:"Trigger element to open the overlay.",name:"triggerElement",required:!1,type:{name:"any"}},triggerClassName:{defaultValue:null,description:"Trigger classname.",name:"triggerClassName",required:!1,type:{name:"string"}},portalClassName:{defaultValue:null,description:"Portal classname.",name:"portalClassName",required:!1,type:{name:"string"}},closeOnBodyClick:{defaultValue:null,description:"Close when the body is clicked or not.",name:"closeOnBodyClick",required:!1,type:{name:"boolean"}},closeOnEscape:{defaultValue:null,description:"Close when escape is pressed or not.",name:"closeOnEscape",required:!1,type:{name:"boolean"}},appendToBody:{defaultValue:null,description:"Append the overlay to the body. Almost always want this.",name:"appendToBody",required:!1,type:{name:"boolean"}},elementType:{defaultValue:null,description:"Overlay element type.",name:"elementType",required:!1,type:{name:"string"}},modifiers:{defaultValue:null,description:"Position modifiers.",name:"modifiers",required:!1,type:{name:"any"}},followCursor:{defaultValue:null,description:"Overlay should follow cursor or not.",name:"followCursor",required:!1,type:{name:"boolean"}},placement:{defaultValue:null,description:"Placement of the overlay.",name:"placement",required:!1,type:{name:"enum",value:[{value:'"auto-start"'},{value:'"auto"'},{value:'"auto-end"'},{value:'"top-start"'},{value:'"top"'},{value:'"top-end"'},{value:'"right-start"'},{value:'"right"'},{value:'"right-end"'},{value:'"bottom-end"'},{value:'"bottom"'},{value:'"bottom-start"'},{value:'"left-end"'},{value:'"left"'},{value:'"left-start"'}]}},onOpen:{defaultValue:null,description:"Event called when the overlay is opened.",name:"onOpen",required:!1,type:{name:"((event?: any) => void)"}},onClose:{defaultValue:null,description:"Event called when the overlay is closed.",name:"onClose",required:!1,type:{name:"((event?: any) => void)"}},ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"Ref<ConnectedOverlayContentRef>"}}}}}catch{}export{O as C};
